name: New_Version

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 6 * * *'

jobs:
  get_versions:
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install jq
        run: sudo apt -y install jq
      - name: Fetch versions
        run: bash ./scripts/generate_ink_releases.sh
      - name: show versions 
        run: cat ./config/ink_versions.json
      - name: Do git status on ink_versions.json
        id: version_info
        run:  |
          latest_ink_version=$(cat ./config/ink_versions.json | jq -r '.[0]')
          echo "ink_version_changed=$(git diff --quiet -- ./config/ink_versions.json && echo 'false' || echo 'true')" >> $GITHUB_OUTPUT
          echo "latest_ink_version=${latest_ink_version}" >> $GITHUB_OUTPUT
          echo "ink_update_pr_name=[auto-generated] add new ink version: ${latest_ink_version}" >> $GITHUB_OUTPUT
      - name: ECHO
        run: |
          echo "${{ steps.version_info.outputs.ink_version_changed == 'true' }}"
          echo "${{ steps.version_info.outputs.ink_version_changed }}"
          echo "${{ steps.version_info.outputs.ink_update_pr_name }}"
      - name: Update contract
        if: ${{ steps.version_info.outputs.ink_version_changed == 'true' }}
        run: bash ./scripts/update_ink_version_to_latest.sh
      - name: Commit
        if: ${{ steps.version_info.outputs.ink_version_changed == 'true' }}
        run: |
          git config --global user.email "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          git config --global user.name "Github Action"
          git add ./config/ink_versions.json
          git add ./crates
          git commit -m "update ink version list, latest version: ${{ steps.version_info.outputs.ink_version_changed }}"
      - name: List PR
        uses: actions/github-script@v6
        with:
          script: |
            const prName = '${{ steps.version_info.outputs.ink_update_pr_name }}'
            const otherPRs = await github.graphql(`
              query {
                  repository(owner: "${{ github.repository_owner }}", name: "ink-playground") {
                    pullRequests(labels: ["automated pr", "INK_VERSION"], last: 100, states: OPEN) {
                      edges {
                        node {
                          title
                          labels(first: 100) {
                            nodes {
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);

            console.log({otherPRs})
              
            const otherPRsWithSameNameAndLabels = otherPRs.repository.pullRequests.edges.filter(edge => {
              const otherPrName = edge.node.title;
              return prName === otherPrName;
            });

            if (otherPRsWithSameNameAndLabels.length > 0) {
              throw new Error('Open PR name and label must be unique');
            }
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update report
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: ink-version-${{ steps.version_info.outputs.latest_ink_version }}
          delete-branch: true
          title: ${{ steps.version_info.outputs.ink_update_pr_name }}
          body: |
            Update report
            - Updated with *today's* date
            - Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          labels: |
            INK_VERSION
            automated pr
          draft: false