ARG REGISTRY_PATH=docker.io/paritytech

FROM ${REGISTRY_PATH}/ink-ci-linux:staging
# ARG RUST_NIGHTLY="2023-06-01"
# ARG RUST_VERSION="1.69.0"

# WORKDIR /builds

# RUN set -eux; \
#   rustup install ${RUST_VERSION} && \
#   rustup default ${RUST_VERSION} && \
#   rustup toolchain install ${RUST_VERSION} && \
#   rustup target add wasm32-unknown-unknown --toolchain ${RUST_VERSION} && \
#   	rustup component add rust-src --toolchain ${RUST_VERSION}

  
#   # rustup toolchain install nightly-${RUST_NIGHTLY} --target wasm32-unknown-unknown \
# 	# 	--profile minimal --component rustfmt clippy rust-src && \

# 	# Alias pinned toolchain as nightly, otherwise it appears as though we
# 	# don't have a nightly toolchain (i.e rustc +nightly --version is empty)
# 	# ln -s "/usr/local/rustup/toolchains/nightly-${RUST_NIGHTLY}-x86_64-unknown-linux-gnu" \
# 	# 	/usr/local/rustup/toolchains/nightly-x86_64-unknown-linux-gnu
# RUN curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

RUN cargo install --force --locked cargo-contract --version 2.0.1
ENV CARGO_TARGET_DIR="/target"
RUN cargo contract new contract

# ARG RUST_VERSION="1.69"

# RUN set -eux; \
# 	rustup toolchain install ${RUST_VERSION} && \
# 	rustup target add wasm32-unknown-unknown --toolchain ${RUST_VERSION} && \
# 	rustup component add rust-src clippy rustfmt --toolchain ${RUST_VERSION} && \
# 	rustup default ${RUST_VERSION}

# ARG INK_VERSION="4.0.0"

# RUN cd contract && cargo add ink@${INK_VERSION}
# RUN cd contract && cargo add --dev  ink_e2e@${INK_VERSION}
RUN cargo contract --help
RUN cd contract && cargo contract build --manifest_path ./Cargo.toml
RUN cd contract && cargo test

WORKDIR /builds/contract